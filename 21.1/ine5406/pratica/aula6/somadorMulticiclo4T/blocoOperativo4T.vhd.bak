library ieee;
use ieee.std_logic_1164.all;

entity blocoOperativo4T is
	generic(N: positive);
	port(
		-- control in
		clock, reset: in std_logic;
		-- control in (command signals from BC)
		scont, ccont, zAC, cAC, cT: in std_logic;		
		-- control out (status signals to BC)
		zero, ov: out std_logic;
		-- data in
		ent: in std_logic_vector(N-1 downto 0);
		-- data out
		soma: out std_logic_vector(N-1 downto 0) 
	);
end entity;

architecture descricaoEstrutural of blocoOperativo4T is
	component multiplexer2x1 is
		generic (	width: positive );
		port(	input0, input1: in std_logic_vector(width-1 downto 0);
				sel: in std_logic;
				output: out std_logic_vector(width-1 downto 0) );
	end component;
	component addersubtractor is
		generic (	N: positive;
					isAdder: boolean;
					isSubtractor: boolean,
					generateOvf: boolean);
		port(	op: in std_logic;
				a, b: in std_logic_vector(N-1 downto 0);
				result: out std_logic_vector(N-1 downto 0);
				ovf, cout: out std_logic );
	end component;
	componentegisterN is
		generic(	width: natural;
					resetValue: integer := 0 );
		port(	-- control
				clock, reset, load: in std_logic;
				-- data
				input: in std_logic_vector(width-1 downto 0);
				output: out std_logic_vector(width-1 downto 0));
	end component;
	component compare is
		generic(	width: natural;
					isSigned: boolean;
					generateLessThan: boolean;
					generateEqual: boolean );
		port(	input0, input1: in std_logic_vector(width-1 downto 0);
				lessThan, equal: out std_logic );
	end component;
	-- COMPLETE COM EVENTUAIS SINAIS INTERNOS
begin
	-- COMPLETE COM EVENTUAIS COMANDOS CONCORRENTES
    -- COMPLETE OS COMANDOS DE INSTANCIACAO ABAIXO
	mux0: multiplexer2x1 
			generic map(width=>)
			port map(input0=>, input1=>, sel=>, output=>);
	cont: component registerN 
			generic map(width=>)
			port map(clock=>, reset=>, load=>,
				input=>,	output=>);
	subtractor0: addersubtractor 
			generic map(N=>, isAdder=>, isSubtractor=>, generateOvf=> )
			port map(op=>, a=>, b=>, result=>, ovf=>, cout
	compare0: compare
			generic map (width=>, isSigned=> , generateLessThan=> ,generateEqual=> )
			port map (input0=> , input1=> , lessThan=> , equal=> );
			
	mux1: multiplexer2x1 
			generic map(width=>)
			port map(input0=>, input1=>, sel=>, output=>);
	AC: component registerN 
			generic map(width=>)
			port map(clock=>, reset=>, load=>,
				input=>,	output=>);
	T: component registerN 
			generic map(width=>)
			port map(clock=>, reset=>, load=>,
				input=>,	output=>);
	adder0: addersubtractor 
			generic map(N=>, isAdder=>, isSubtractor=>, generateOvf=> )
			port map(op=>, a=>, b=>, result=>, ovf=>, cout=>);
end architecture;